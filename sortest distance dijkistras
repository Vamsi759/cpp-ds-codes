#include<bits/stdc++.h>
using namespace std;
class graph{
    
    int v;
    list<pair<int,int>> *l;
    public:
    
    graph(int x){
        v=x;
              l=new list<pair<int,int>>[v];
    }
   //  l=new list<pair<int,int>>[v];
    void insert(int i,int j,int wt){
        l[i].push_back({wt,j});
        l[j].push_back({wt,i});
    }
    void print(){
    for(int i=0;i<v;i++){
        cout<<i<<"-->";
        for(auto j:l[i]){
            cout<<j.first<<" "<<j.second<<"__";
        }
        cout<<endl;
    }
    }
    int den(int b){
        
    vector<int>dist(v,INT_MAX);
    set<pair<int,int>>s;
    dist[b]=0;
    s.insert({0,b});
    
    while(!s.empty()){
        
        auto it=s.begin();
        int node=it->second;
        int dis=it->first;
        s.erase(it);
        
        
       // cout<<node<<" "<<distillnow<<endl;
        for(auto pair:l[node]){
            
            
            int nbr=pair.second;
            int edge=pair.first;
            
            if((edge+dis)<dist[nbr]){
                
                auto it=s.find({dist[nbr],nbr});
                
                if(it!=s.end()){
                    s.erase(it);
                }
                
                dist[nbr]=edge+dis;
                s.insert({dist[nbr],nbr});
               
            }
        }
        
    }
    
        
        
        
        
       
        for(int i=0;i<v;i++){
            
           cout<<i<<" "<<dist[i]<<endl;
        }
        
        return dist[4];
    }
};

int main(){
    
    graph g(5);
    g.insert(0,1,1);
    g.insert(1,2,2);
    g.insert(0,2,4);
    g.insert(0,3,7);
    g.insert(3,2,2);
    g.insert(3,4,2);//g.print();
    cout<<" "<<g.den(0);
    
}




//end one extra copy






































/*



#include<iostream>
#include<list>
#include<set>
#include<algorithm>
#include<limits.h>
#include<vector>

using namespace std;
class graph{
    public:
    int x;
    list<pair<int,int>>*l;
    graph(int d){
        x=d;
        l=new list<pair<int,int>>[x];
    }
    
    void insert(int a,int b,int w){
        l[a].push_back({w,b});
        l[b].push_back({w,a});
    }
    
    void print(){
        
    }
    
    void denn(int a){
        
        vector<int>d(x,INT_MAX);
        set<pair<int,int>>den;
        d[a]=0;
        den.insert({d[a],a});
        
        while(!den.empty()){
            
            auto ap=den.begin();
            int n=ap->second;
            int dis=ap->first;
            den.erase(ap);
            
            for(auto i:l[n]){
                int nbr=i.second;
                int edge=i.first;
                
                if((dis+edge)<d[nbr]){
                    auto s=den.find({d[nbr],nbr});
                    
                    if(s!=den.end())den.erase(s);
                    
                    d[nbr]=dis+edge;
                    den.insert({d[nbr],nbr});
                    
                }
            }
        }
        
        for(int i=0;i<d.size();i++){
            cout<<i<<" "<<d[i]<<endl;
        }
        
        
    }
};
int main()
{
    graph g(5);
    
   /*g.insert(0,1,1);
    g.insert(1,2,2);
    g.insert(0,2,4);
    g.insert(0,3,7);
    g.insert(3,2,2);
    g.insert(3,4,2);//g.print();*/
    vector<int>p={0,1,1,1,2,2,0,2,4,0,3,7,3,2,2,3,4,2};
    for(int i=0;i<p.size();i+=3){
        cout<<p[i]<<p[i+1]<<p[i+2]<<endl;
        g.insert(p[i],p[i+1],p[i+2]);
    }
    
    g.denn(0);
    
}


*/

















